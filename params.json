{"name":"Modem-serial","tagline":"This NodeJS utility aims to make it easy to interact with USB dongles, providing functions to get info, connect, make calls with just an API call.","body":"# Modem Serial\r\nThis NodeJS utility aims to make it easy to interact with USB dongles, providing functions to get info, connect, make calls with just a function. This module will take care of all communications with the device.\r\n\r\n**IMPORTANT NOTE**: This module its in a very early alpha version. I do not recommend using it in production environments.\r\n\r\n## How to use it\r\n\r\n### 1. Installation\r\nTo install it, you just have to install it as a normal npm module:\r\n\r\n```shell\r\nnpm install modem-serial\r\n```\r\n\r\n### 2. Initialization\r\nIn order to initialize de device and the module, you must require it and use the constructor passing as argument the route to your device:\r\n\r\n```javascript\r\nvar USBSerial = require('modem-serial');\r\nvar usb = USBSerial('/dev/ttyUSB0');\r\n```\r\n\r\n### 3. API functions\r\n#### isOpen()\r\nIt returns `true` if the device is still open for writes.\r\n#### getInfo()\r\nIt returns all the information gotten by the moment of the device.\r\n#### getCallInfo()\r\nIt returns the current/last call info.\r\n#### setTTL(*ttl*)\r\nSets *ttl* milliseconds between each full radio info update.\r\n#### setDefaultDuration(*duration*)\r\nSets default *duration* seconds for outgoing & incoming calls in which duration is not indicated (default: 90 seconds).\r\n#### call(*number*, *duration*)\r\nIt calls the specified *number* and will hangup after *duration* seconds.\r\n#### answer(*duration*, *timeout*)\r\nExpects an incoming call in *timeout* seconds and will hangup after *duration* seconds.\r\n#### hangup()\r\nHangups current call.\r\n#### destroy()\r\nCloses connection.\r\n#### restart()\r\nRestart device.\r\n**Will cause unplugs from system.**\r\n#### connect(*err*, *callback*)\r\n**NOT WORKING AT THIS TIME. It will in future releases**\r\nIt executes the connection process for this model.\r\n\r\n### 4. Events\r\nFunctions to catch events.\r\n#### getNotified(*callback*)\r\nIf you want to be notified when some info has changed, you can call the getNotified function, using as callback, the function you want to execute when something has changed.\r\n```javascript\r\nusb.getNotified(function (field, oldValue, newValue) {\r\n  console.log('%s changed from %s to %s', field, oldValue, newValue);\r\n  console.log(usb.getInfo());\r\n});\r\n```\r\n#### onCallStatusChange(*callback*)\r\nThis event is called when the call status has changed.\r\n```javascript\r\nusb.onCallStatusChange(function (status, ts) {\r\n\tdebug('[%d] Call is in status: %s', ts, status);\r\n\tdebug(usb.getCallInfo());\r\n});\r\n```\r\n\r\n## Supported Models\r\nBy the moment, I have tried only with some Huawei models. As soon as new devices are tested, this list will be updated.\r\n\r\nHelp is really welcome :smiley:\r\n\r\n| Manufacturer | Model | Comments |\r\n|:---|:---|---|\r\n|Huawei| E173u | Signal Quality parameters are not provided by this device (only RSSI)<br>**IMPORTANT**: Firmware version 11.126.16.00.00 doesn't work correctly with ATH command (hangup). Consider updating firmware. |\r\n|QualComm| BU580 | Features working: provider and RSSI information and call actions. |\r\n\r\n## Testing\r\nTo test this module, run the command:\r\n```shell\r\nnpm test\r\n```\r\nThis, by default, will try to open the device in `/dev/cu.HUAWEIMobile-Pcui`. If your modem linked with other name (pe: `/dev/ttyUSB0`), call it using:\r\n```shell\r\nDEV=/dev/ttyUSB0 npm test\r\n```\r\n\r\nIf you want to test the outgoing calling function, just add a NUMBER environment variable\r\n```shell\r\nNUMBER=XXXXXX npm test\r\n```\r\n\r\n## To-Do's\r\n- Get endingStatus and hangupCause for CDMA\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}